#!/bin/bash

# Function: Generate final report
generate_report() {
    log "INFO" "REPORT" "START" "Generating final report"

    local report_file="${RESULTS_DIR}/final_report.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    {
        echo "# Web Application Security Scan Report"
        echo
        echo "## Scan Information"
        echo "- **Target:** ${TARGET_IP}:${PORT}"
        echo "- **Scan Date:** ${timestamp}"
        echo "- **Intensity Level:** ${INTENSITY_LEVELS[${INTENSITY}]:-Normal}"
        [[ -n "${HOSTNAME:-}" ]] && echo "- **Hostname:** ${HOSTNAME}"
        echo
        echo "## Executive Summary"
        echo "This report contains the findings of an automated security scan."
        echo

        # Service Discovery Results
        echo "## Service Discovery"
        if [[ -f "${TEMP_DIR}/Nmap_service_scan.out" ]]; then
            echo "### Nmap Findings"
            echo '```'
            cat "${TEMP_DIR}/Nmap_service_scan.out"
            echo '```'
        fi
        echo

        # Web Technology Results
        echo "## Web Technology Detection"
        if [[ -f "${RESULTS_DIR}/whatweb_results.txt" ]]; then
            echo "### WhatWeb Findings"
            echo '```'
            cat "${RESULTS_DIR}/whatweb_results.txt"
            echo '```'
        fi
        echo

        # WordPress Results (if detected)
        if [[ "${WORDPRESS_DETECTED:-false}" == true && -f "${RESULTS_DIR}/wpscan_results.txt" ]]; then
            echo "## WordPress Analysis"
            echo "### WPScan Findings"
            echo '```'
            cat "${RESULTS_DIR}/wpscan_results.txt"
            echo '```'
            echo
        fi

        # Directory Enumeration Results
        echo "## Directory Enumeration"
        if [[ -f "${RESULTS_DIR}/gobuster_dirs.txt" ]]; then
            echo "### Discovered Directories"
            echo '```'
            cat "${RESULTS_DIR}/gobuster_dirs.txt"
            echo '```'
        fi
        echo

        # File Enumeration Results
        echo "## File Enumeration"
        if [[ -f "${RESULTS_DIR}/gobuster_files.txt" ]]; then
            echo "### Discovered Files"
            echo '```'
            cat "${RESULTS_DIR}/gobuster_files.txt"
            echo '```'
        fi
        echo

        # Virtual Host Results
        if [[ -n "${HOSTNAME:-}" && -f "${RESULTS_DIR}/ffuf_vhosts.txt" ]]; then
            echo "## Virtual Host Enumeration"
            echo "### Discovered Virtual Hosts"
            echo '```'
            cat "${RESULTS_DIR}/ffuf_vhosts.txt"
            echo '```'
            echo
        fi

        # Vulnerability Scan Results
        echo "## Vulnerability Assessment"
        if [[ -f "${RESULTS_DIR}/nmap_vuln_results.txt" ]]; then
            echo "### Nmap Vulnerability Scan Results"
            echo '```'
            cat "${RESULTS_DIR}/nmap_vuln_results.txt"
            echo '```'
        fi
        echo

        # Recommendations
        echo "## Recommendations"
        echo "1. Review all discovered endpoints and ensure they are required for business operations"
        echo "2. Verify access controls on all discovered resources"
        echo "3. Address any identified vulnerabilities based on risk assessment"
        echo "4. Consider implementing additional security controls where needed"
        echo

        # Footer
        echo "---"
        echo "Report generated by Web Application Security Scanner v2.0"
        echo "Scan completed at: ${timestamp}"

    } > "${report_file}"

    log "SUCCESS" "REPORT" "COMPLETE" "Final report generated at ${report_file}"

    # If html output is requested, convert markdown to html
    if command -v pandoc >/dev/null 2>&1; then
        local html_report="${RESULTS_DIR}/final_report.html"
        if pandoc -f markdown -t html "${report_file}" -o "${html_report}" 2>/dev/null; then
            log "SUCCESS" "REPORT" "HTML" "HTML report generated at ${html_report}"
        else
            log "WARNING" "REPORT" "HTML" "Failed to generate HTML report"
        fi
    fi
}
